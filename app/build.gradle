apply plugin: 'android'
apply plugin: 'versions'
apply plugin: 'retrolambda'

retrolambda {
    jdk System.getenv("JAVA8_HOME")
    oldJdk System.getenv("JAVA7_HOME")
    javaVersion JavaVersion.VERSION_1_7
}

// Manifest version information!
def versionMajor = 0
def versionMinor = 8
def versionPatch = 0

/*
 * In release mode: read password from environment variable if available or console else
 */
def readPassword = { ->
    def runTasks = gradle.startParameter.taskNames
    def env = System.getenv();
    if ('assembleProductionEnvironmentRelease' in runTasks) {
        if (env['RELEASE_KEYSTORE_PW']) {
            return env['RELEASE_KEYSTORE_PW']
        } else {
            return System.console().readLine("\n\$ Enter keystore password: ")
        }
    } else {
        return ""
    }
}

android {
    compileSdkVersion 19
    buildToolsVersion "20.0.0"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {
            storeFile file('keystore/debug.keystore')
        }
        release {
            storeFile file('keystore/fuelmeup-release.keystore')
            keyAlias 'fuelmeup'
            storePassword readPassword()
            keyPassword storePassword
        }
    }

    buildTypes {
        release {
            runProguard false
            signingConfig signingConfigs.release
            zipAlign true
        }
    }

    defaultConfig {
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100
        applicationId "de.fuelmeup"
        minSdkVersion 15
        targetSdkVersion 19
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }

    productFlavors {
        mockEnvironment {}
        productionEnvironment {}
    }


    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    compile files('libs/android-async-http-1.4.3.jar')
    compile 'com.google.android.gms:play-services:4.3.23'
    compile 'com.squareup.retrofit:retrofit:1.5.1'
    compile 'com.netflix.rxjava:rxjava-android:0.19.0'
    compile 'com.squareup.okhttp:okhttp:1.5.4'
    compile 'com.google.code.gson:gson:2.2.4'
    compile 'com.android.support:support-v13:19.1.0'
    compile 'com.squareup.dagger:dagger:1.2.2'
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile 'com.jakewharton.timber:timber:2.4.+'
    compile 'com.google.maps.android:android-maps-utils:0.3.1'

/*    androidTestCompile 'org.objenesis:objenesis:2.0'
    androidTestCompile 'org.hamcrest:hamcrest-core:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-integration:1.1'
    androidTestCompile 'org.hamcrest:hamcrest-library:1.1'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.1'*/

    mockEnvironmentCompile 'org.objenesis:objenesis:2.0'
    mockEnvironmentCompile 'org.hamcrest:hamcrest-core:1.1'
    mockEnvironmentCompile 'org.hamcrest:hamcrest-integration:1.1'
    mockEnvironmentCompile 'org.hamcrest:hamcrest-library:1.1'
    mockEnvironmentCompile 'org.mockito:mockito-core:1.10.8'
    mockEnvironmentCompile 'com.google.dexmaker:dexmaker:1.1'
    mockEnvironmentCompile('com.google.dexmaker:dexmaker-mockito:1.1') {
        exclude group: 'org.mockito'
    }
}
